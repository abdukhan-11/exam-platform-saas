// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model SuperAdmin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("super_admin")
}

model College {
  id          String   @id @default(cuid())
  name        String
  username    String   @unique // This will be the college_username from PRD
  address     String?
  phone       String?
  email       String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  subjects    Subject[]
  exams       Exam[]
  classes     Class[]
  events      Event[]
  studentProfiles StudentProfile[]

  @@map("college")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  isActive  Boolean  @default(true)
  collegeId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  college      College?     @relation(fields: [collegeId], references: [id])
  examResults  ExamResult[]
  refreshTokens RefreshToken[]
  enrollments  Enrollment[]
  studentProfile StudentProfile?
  attempts     StudentExamAttempt[]

  @@map("user")
}

model Subject {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  description String?
  credits   Int      @default(3)
  isActive  Boolean  @default(true)
  collegeId String
  classId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  college College @relation(fields: [collegeId], references: [id])
  class   Class?  @relation(fields: [classId], references: [id])
  exams   Exam[]
  events  Event[]

  @@map("subject")
}

model Exam {
  id          String   @id @default(cuid())
  title       String
  description String?
  duration    Int      // in minutes
  totalMarks  Int
  passingMarks Int
  startTime   DateTime
  endTime     DateTime
  isActive    Boolean  @default(true)
  subjectId   String
  collegeId   String
  classId     String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject     Subject      @relation(fields: [subjectId], references: [id])
  college     College      @relation(fields: [collegeId], references: [id])
  class       Class?       @relation(fields: [classId], references: [id])
  questions   Question[]
  examResults ExamResult[]
  attempts    StudentExamAttempt[]

  @@map("exam")
}

model Question {
  id          String   @id @default(cuid())
  text        String
  type        QuestionType
  options     String?  // JSON string for multiple choice
  correctAnswer String
  marks       Int
  examId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  exam Exam @relation(fields: [examId], references: [id])
  questionOptions QuestionOption[]
  answers         StudentAnswer[]

  @@map("question")
}

model ExamResult {
  id        String   @id @default(cuid())
  userId    String
  examId    String
  score     Int
  totalMarks Int
  percentage Float
  startTime DateTime
  endTime   DateTime?
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  exam Exam @relation(fields: [examId], references: [id])

  @@unique([userId, examId])
  @@map("exam_result")
}

model QuestionOption {
  id         String   @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean  @default(false)

  // Relations
  question Question @relation(fields: [questionId], references: [id])
  answers  StudentAnswer[]

  @@map("question_option")
}

model Class {
  id        String   @id @default(cuid())
  name      String
  description String?
  collegeId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  college     College  @relation(fields: [collegeId], references: [id])
  enrollments Enrollment[]
  subjects    Subject[]
  exams       Exam[]
  events      Event[]

  @@unique([collegeId, name])
  @@map("class")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  class Class @relation(fields: [classId], references: [id])

  @@unique([userId, classId])
  @@map("enrollment")
}

model StudentProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  collegeId       String
  rollNo          String
  fatherName      String?
  profileImageUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  college College @relation(fields: [collegeId], references: [id])

  @@unique([collegeId, rollNo])
  @@map("student_profile")
}

model StudentExamAttempt {
  id         String   @id @default(cuid())
  userId     String
  examId     String
  startedAt  DateTime @default(now())
  endedAt    DateTime?
  score      Int      @default(0)
  totalMarks Int      @default(0)
  isCompleted Boolean @default(false)

  // Relations
  user    User @relation(fields: [userId], references: [id])
  exam    Exam @relation(fields: [examId], references: [id])
  answers StudentAnswer[]

  @@unique([userId, examId])
  @@map("student_exam_attempt")
}

model StudentAnswer {
  id              String   @id @default(cuid())
  attemptId       String
  questionId      String
  selectedOptionId String?
  answerText      String?
  isCorrect       Boolean  @default(false)
  marksAwarded    Int      @default(0)

  // Relations
  attempt StudentExamAttempt @relation(fields: [attemptId], references: [id])
  question Question           @relation(fields: [questionId], references: [id])
  selectedOption QuestionOption? @relation(fields: [selectedOptionId], references: [id])

  @@unique([attemptId, questionId])
  @@map("student_answer")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        EventType
  scheduledAt DateTime
  collegeId   String
  classId     String?
  subjectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  college College @relation(fields: [collegeId], references: [id])
  class   Class?  @relation(fields: [classId], references: [id])
  subject Subject? @relation(fields: [subjectId], references: [id])

  @@map("event")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("refresh_token")
}

enum UserRole {
  STUDENT
  TEACHER
  COLLEGE_ADMIN
  SUPER_ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

enum EventType {
  EXAM
  ASSIGNMENT
  OTHER
}
