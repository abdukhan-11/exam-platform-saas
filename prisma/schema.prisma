// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// SuperAdmin model for system administration
model SuperAdmin {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("super_admins")
}

// College model for educational institutions
model College {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String?
  city        String?
  state       String?
  country     String   @default("India")
  phone       String?
  email       String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  subjects    Subject[]
  exams       Exam[]

  @@map("colleges")
}

// User model for all users (students, teachers, admins)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  phone     String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  collegeId String?
  college   College? @relation(fields: [collegeId], references: [id], onDelete: SetNull)
  
  subjects  Subject[]
  exams     Exam[]
  results   ExamResult[]

  @@map("users")
}

// Subject model for academic subjects
model Subject {
  id          String   @id @default(cuid())
  name        String
  code        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  collegeId   String
  college     College @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  
  users       User[]
  exams       Exam[]

  @@unique([collegeId, code])
  @@map("subjects")
}

// Exam model for examinations
model Exam {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  duration    Int      // Duration in minutes
  totalMarks  Int
  passingMarks Int
  isActive    Boolean  @default(true)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  collegeId   String
  college     College @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  
  subjectId   String
  subject     Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  
  questions   Question[]
  results     ExamResult[]

  @@map("exams")
}

// Question model for exam questions
model Question {
  id          String   @id @default(cuid())
  text        String
  type        QuestionType
  options     String[] // JSON array of options for MCQ
  correctAnswer String?
  marks       Int      @default(1)
  explanation String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  examId      String
  exam        Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@map("questions")
}

// ExamResult model for storing exam results
model ExamResult {
  id        String   @id @default(cuid())
  score     Int
  totalMarks Int
  percentage Float
  isPassed  Boolean
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  examId    String
  exam      Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@unique([userId, examId])
  @@map("exam_results")
}

// Enums
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  COLLEGE_ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  LONG_ANSWER
}
