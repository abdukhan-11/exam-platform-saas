// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model SuperAdmin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("super_admin")
}

model College {
  id          String   @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  subjects    Subject[]
  exams       Exam[]

  @@map("college")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  isActive  Boolean  @default(true)
  collegeId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  college      College?     @relation(fields: [collegeId], references: [id])
  examResults  ExamResult[]
  refreshTokens RefreshToken[]

  @@map("user")
}

model Subject {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  description String?
  credits   Int      @default(3)
  isActive  Boolean  @default(true)
  collegeId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  college College @relation(fields: [collegeId], references: [id])
  exams   Exam[]

  @@map("subject")
}

model Exam {
  id          String   @id @default(cuid())
  title       String
  description String?
  duration    Int      // in minutes
  totalMarks  Int
  passingMarks Int
  startTime   DateTime
  endTime     DateTime
  isActive    Boolean  @default(true)
  subjectId   String
  collegeId   String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject     Subject      @relation(fields: [subjectId], references: [id])
  college     College      @relation(fields: [collegeId], references: [id])
  questions   Question[]
  examResults ExamResult[]

  @@map("exam")
}

model Question {
  id          String   @id @default(cuid())
  text        String
  type        QuestionType
  options     String?  // JSON string for multiple choice
  correctAnswer String
  marks       Int
  examId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  exam Exam @relation(fields: [examId], references: [id])

  @@map("question")
}

model ExamResult {
  id        String   @id @default(cuid())
  userId    String
  examId    String
  score     Int
  totalMarks Int
  percentage Float
  startTime DateTime
  endTime   DateTime?
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  exam Exam @relation(fields: [examId], references: [id])

  @@unique([userId, examId])
  @@map("exam_result")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("refresh_token")
}

enum UserRole {
  STUDENT
  TEACHER
  COLLEGE_ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}
